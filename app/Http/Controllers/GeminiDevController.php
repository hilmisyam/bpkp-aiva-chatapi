<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Arr;
use App\Exceptions\GeminiException;
use Illuminate\Support\Facades\DB;

class GeminiDevController extends Controller {

    public function askGemini(Request $request) {
        $structure_json = '{"schemas":[{"name":"ref","description":"Contains reference data used across the system, such as geographic regions, countries, administrative divisions, employee rankings, and regulations.","tables":[{"name":"regions","description":"Stores geographic regions, providing a hierarchical level for organizing countries.","columns":[{"name":"region_id","type":"serial","primary_key":true,"description":"Unique identifier for each region."},{"name":"region_name","type":"varchar(25)","description":"The name of the region, limited to 25 characters."}]},{"name":"countries","description":"Stores country information and associates it with a geographic region.","columns":[{"name":"id","type":"integer","primary_key":true,"description":"Unique identifier for each country."},{"name":"name","type":"varchar(40)","description":"The name of the country, up to 40 characters."},{"name":"region","type":"integer","foreign_key":{"references":"ref.regions","on_update":"cascade","on_delete":"cascade"},"description":"Reference to the region the country belongs to."},{"name":"created_on","type":"timestamp","default":"CURRENT_TIMESTAMP","description":"Timestamp when the country record was created."},{"name":"updated_on","type":"timestamp","description":"Timestamp when the country record was last updated."},{"name":"code","type":"varchar(2)","unique":true,"description":"ISO 3166-1 alpha-2 country code."}]},{"name":"provinces","description":"Stores administrative province information and links each province to a country.","columns":[{"name":"id","type":"serial","primary_key":true,"description":"Unique identifier for each province."},{"name":"country","type":"integer","foreign_key":{"references":"ref.countries"},"description":"Reference to the country the province belongs to."},{"name":"code","type":"varchar(2)","unique":true,"description":"Unique code representing the province, limited to 2 characters."},{"name":"name","type":"varchar(50)","description":"The name of the province, up to 50 characters."}]},{"name":"cities","description":"Stores city information, including its administrative type and which province it belongs to.","columns":[{"name":"id","type":"integer","primary_key":true,"description":"Unique identifier for each city."},{"name":"province","type":"integer","foreign_key":{"references":"ref.provinces"},"description":"Reference to the province the city belongs to."},{"name":"code","type":"varchar(4)","unique":true,"description":"Unique city code with a length of 4 characters."},{"name":"type","type":"integer","description":"Numeric value indicating the type of city (e.g., metropolitan, urban, rural)."},{"name":"name","type":"varchar(50)","description":"The name of the city, up to 50 characters."}]},{"name":"ranks","description":"Stores information about employee ranks, including salary ranges.","columns":[{"name":"id","type":"serial","primary_key":true,"description":"Unique identifier for each rank."},{"name":"code","type":"varchar(5)","description":"Unique code identifying the rank, up to 5 characters."},{"name":"name","type":"varchar(50)","description":"Name of the rank, up to 50 characters."},{"name":"min_salary","type":"integer","description":"Minimum salary range for the rank."},{"name":"max_salary","type":"integer","description":"Maximum salary range for the rank."}]},{"name":"echelons","description":"Stores information about employee echelons, including salary ranges and references to the rank hierarchy.","columns":[{"name":"id","type":"serial","primary_key":true,"description":"Unique identifier for each echelon."},{"name":"name","type":"varchar(50)","description":"Name of the echelon, up to 50 characters."},{"name":"min_rank","type":"integer","foreign_key":{"references":"ref.ranks","on_update":"cascade","on_delete":"cascade"},"description":"Reference to the minimum rank required for this echelon."},{"name":"max_rank","type":"integer","foreign_key":{"references":"ref.ranks","on_update":"cascade","on_delete":"cascade"},"description":"Reference to the maximum rank allowed for this echelon."},{"name":"min_salary","type":"integer","description":"Minimum salary range for the echelon."},{"name":"max_salary","type":"integer","description":"Maximum salary range for the echelon."},{"name":"created_on","type":"timestamp","default":"CURRENT_TIMESTAMP","description":"Timestamp indicating when the echelon record was created."},{"name":"updated_on","type":"timestamp","description":"Timestamp of the most recent update to the echelon record."},{"name":"code","type":"varchar(5)","description":"Unique code identifying the echelon, up to 5 characters."}]},{"name":"regulation_categories","description":"Stores categories for classifying regulations and legal documents.","columns":[{"name":"id","type":"serial","primary_key":true,"description":"Unique identifier for each regulation category."},{"name":"name","type":"varchar(100)","description":"Name of the regulation category (e.g., Tax, Labor, Compliance)."},{"name":"created_on","type":"timestamp","default":"CURRENT_TIMESTAMP","description":"Timestamp indicating when the regulation category record was created."},{"name":"updated_on","type":"timestamp","description":"Timestamp indicating the most recent update to the regulation category record."},{"name":"is_active","type":"integer","default":1,"description":"Status indicator (1: Active, 0: Inactive)."}]},{"name":"leave_types","description":"Defines the various types of leave available for employees.","columns":[{"name":"id","type":"serial","primary_key":true,"description":"Unique identifier for each leave type."},{"name":"name","type":"varchar(50)","description":"Name of the leave type (e.g., Annual Leave, Sick Leave)."},{"name":"max_days","type":"integer","description":"Maximum number of days allowed for this leave type."},{"name":"cycle","type":"varchar(20)","description":"Leave cycle period (e.g., annual, monthly)."}]},{"name":"kpi_categories","description":"Stores categories of Key Performance Indicators (KPIs) for performance evaluation.","columns":[{"name":"id","type":"serial","primary_key":true,"description":"Unique identifier for each KPI category."},{"name":"name","type":"varchar(100)","unique":true,"description":"Name of the KPI category (e.g., Efficiency, Accuracy)."},{"name":"description","type":"text","description":"Detailed explanation or description of the KPI category."},{"name":"unit","type":"varchar(50)","description":"Measurement unit for the KPI (e.g., %, hours)."},{"name":"created_on","type":"timestamp","default":"CURRENT_TIMESTAMP","description":"Timestamp when the KPI category was created."},{"name":"updated_on","type":"timestamp","description":"Timestamp when the KPI category was last updated."}]},{"name":"offices","description":"Stores information about physical office locations for organizational units.","columns":[{"name":"id","type":"serial","primary_key":true,"description":"Unique identifier for each office location."},{"name":"name","type":"varchar(100)","description":"Name or title of the office location."},{"name":"address","type":"varchar(200)","description":"Complete physical address of the office."},{"name":"postal_code","type":"varchar(12)","description":"Postal code of the office location."},{"name":"city","type":"integer","foreign_key":{"references":"ref.cities"},"description":"Reference to the city where the office is located."},{"name":"province","type":"integer","foreign_key":{"references":"ref.provinces"},"description":"Reference to the province where the office is located."},{"name":"country","type":"integer","foreign_key":{"references":"ref.countries"},"description":"Reference to the country where the office is located."}]},{"name":"regulations","description":"Stores regulation records, including descriptions and file references.","columns":[{"name":"id","type":"serial","primary_key":true,"description":"Unique identifier for each regulation."},{"name":"category","type":"integer","foreign_key":{"references":"ref.regulation_categories"},"description":"Reference to the regulation category."},{"name":"name","type":"text","description":"Title or name of the regulation."},{"name":"description","type":"text","description":"Detailed description of the regulation\'s content."},{"name":"created_on","type":"timestamp","default":"CURRENT_TIMESTAMP","description":"Timestamp when the regulation record was created."},{"name":"updated_on","type":"timestamp","description":"Timestamp when the regulation record was last updated."},{"name":"status","type":"integer","description":"Status of the regulation (1: Valid, 2: Invalid)."},{"name":"file_path","type":"text","description":"Path to the regulation document file for retrieval."}]}]},{"name":"hr","description":"Contains human resources-related data, including employee records, jobs, attendance, and organizational units.","tables":[{"name":"jobs","description":"Stores information about job positions, including salary ranges and hierarchical echelons.","columns":[{"name":"id","type":"serial","primary_key":true,"description":"Unique identifier for each job position."},{"name":"title","type":"varchar(100)","description":"The official title or name of the job, up to 100 characters."},{"name":"echelon","type":"integer","foreign_key":{"references":"ref.echelons","on_update":"cascade","on_delete":"cascade"},"description":"Reference to the echelon level associated with this job."},{"name":"min_salary","type":"integer","description":"Minimum salary for this job position."},{"name":"max_salary","type":"integer","description":"Maximum salary for this job position."},{"name":"created_on","type":"timestamp","default":"CURRENT_TIMESTAMP","description":"Timestamp when the job record was created."},{"name":"updated_on","type":"timestamp","description":"Timestamp of the most recent update to the job record."},{"name":"rank","type":"integer","foreign_key":{"references":"ref.ranks","on_update":"cascade","on_delete":"cascade"},"description":"Reference to the rank level associated with this job."}]},{"name":"units","description":"Stores information about organizational units and their hierarchy.","columns":[{"name":"id","type":"serial","primary_key":true,"description":"Unique identifier for each organizational unit."},{"name":"name","type":"varchar(100)","description":"The name of the organizational unit, up to 100 characters."},{"name":"echelon","type":"integer","description":"Echelon level associated with the unit."},{"name":"office","type":"integer","foreign_key":{"references":"ref.offices"},"description":"Reference to the office where the unit is located."},{"name":"managing_unit","type":"integer","foreign_key":{"references":"hr.units"},"description":"Reference to the parent unit that manages this unit."},{"name":"head","type":"integer","description":"Identifier for the head of the unit."},{"name":"created_on","type":"timestamp","default":"CURRENT_TIMESTAMP","description":"Timestamp when the unit record was created."},{"name":"updated_on","type":"integer","description":"Timestamp of the most recent update to the unit record."}]},{"name":"employees","description":"Stores detailed information about employees and their employment details.","columns":[{"name":"id","type":"serial","primary_key":true,"description":"Unique identifier for each employee."},{"name":"id_number","type":"varchar(18)","description":"National identification number of the employee."},{"name":"first_name","type":"varchar(50)","description":"First name of the employee."},{"name":"last_name","type":"varchar(50)","description":"Last name of the employee."},{"name":"citizen_number","type":"varchar(16)","description":"Citizen number or social security number."},{"name":"birth_place","type":"varchar(50)","description":"Place of birth of the employee."},{"name":"birth_date","type":"date","description":"Date of birth of the employee."},{"name":"address","type":"varchar(200)","description":"Residential address of the employee."},{"name":"email","type":"varchar(50)","description":"Email address of the employee."},{"name":"phone_number","type":"varchar(20)","description":"Contact number of the employee."},{"name":"tax_number","type":"varchar(20)","description":"Tax identification number of the employee."},{"name":"hire_date","type":"date","description":"Date when the employee was hired."},{"name":"resignation_date","type":"date","description":"Date when the employee resigned, if applicable."},{"name":"rank","type":"integer","foreign_key":{"references":"ref.ranks"},"description":"Reference to the employee\'s rank."},{"name":"job","type":"integer","foreign_key":{"references":"hr.jobs","on_update":"cascade","on_delete":"cascade"},"description":"Reference to the employee\'s job position."},{"name":"unit","type":"integer","foreign_key":{"references":"hr.units","on_update":"cascade","on_delete":"cascade"},"description":"Reference to the unit the employee belongs to."},{"name":"manager","type":"integer","foreign_key":{"references":"hr.employees","on_update":"cascade","on_delete":"cascade"},"description":"Reference to the employee\'s manager."},{"name":"salary","type":"integer","default":0,"description":"Salary of the employee."},{"name":"created_on","type":"timestamp","default":"CURRENT_TIMESTAMP","description":"Timestamp when the employee record was created."},{"name":"updated_on","type":"timestamp","description":"Timestamp of the most recent update to the employee record."},{"name":"sex","type":"integer","description":"Gender of the employee (1: Male, 2: Female)."}]},{"name":"dependents","description":"Stores information about employees\' dependents, including their relationship to the employee.","columns":[{"name":"id","type":"serial","primary_key":true,"description":"Unique identifier for each dependent."},{"name":"first_name","type":"varchar(50)","description":"First name of the dependent."},{"name":"last_name","type":"varchar(50)","description":"Last name of the dependent."},{"name":"relationship","type":"varchar(25)","description":"Relationship of the dependent to the employee (e.g., spouse, child)."},{"name":"employee","type":"integer","foreign_key":{"references":"hr.employees"},"description":"Reference to the employee associated with this dependent."},{"name":"created_on","type":"timestamp","default":"CURRENT_TIMESTAMP","description":"Timestamp when the dependent record was created."},{"name":"updated_on","type":"timestamp","description":"Timestamp of the most recent update to the dependent record."}]},{"name":"leaves","description":"Records employee leave requests, including leave type, approval status, and duration.","columns":[{"name":"id","type":"bigserial","primary_key":true,"description":"Unique identifier for each leave record."},{"name":"employee","type":"integer","foreign_key":{"references":"hr.employees"},"description":"Reference to the employee requesting the leave."},{"name":"leave_type","type":"integer","foreign_key":{"references":"ref.leave_types"},"description":"Reference to the type of leave (e.g., annual, sick leave)."},{"name":"start_date","type":"date","description":"Start date of the leave."},{"name":"end_date","type":"date","description":"End date of the leave."},{"name":"total_days","type":"serial","description":"Total number of days requested for the leave."},{"name":"paid","type":"integer","description":"Indicates whether the leave is paid (1: Paid, 2: Partial, 3: Unpaid)."},{"name":"status","type":"integer","description":"Approval status of the leave (1: Approved, 2: Rejected, 3: Pending)."},{"name":"approved_by","type":"integer","foreign_key":{"references":"hr.employees"},"description":"Reference to the employee who approved the leave."},{"name":"created_on","type":"timestamp","default":"CURRENT_TIMESTAMP","description":"Timestamp when the leave record was created."},{"name":"updated_on","type":"timestamp","description":"Timestamp of the most recent update to the leave record."}]},{"name":"leave_entitlements","description":"Tracks leave entitlements, usage, and remaining days for each employee.","columns":[{"name":"id","type":"serial","primary_key":true,"description":"Unique identifier for each leave entitlement record."},{"name":"year","type":"varchar(4)","description":"The calendar year for which the leave entitlement is valid."},{"name":"employee","type":"integer","foreign_key":{"references":"hr.employees"},"description":"Reference to the employee associated with the leave entitlement."},{"name":"leave_type","type":"integer","foreign_key":{"references":"ref.leave_types"},"description":"Reference to the type of leave."},{"name":"entitlement","type":"integer","description":"Total number of leave days entitled to the employee."},{"name":"used","type":"integer","description":"Number of leave days used by the employee."},{"name":"remaining","type":"integer","generated":"always","description":"Calculated field representing remaining leave days (entitlement - used)."},{"name":"valid_fr","type":"date","description":"Start date of the leave entitlement validity period."},{"name":"valid_thru","type":"date","description":"End date of the leave entitlement validity period."},{"name":"status","type":"integer","description":"Status of the leave entitlement (1: Active, 2: Pending, 3: Expired, 4: Depleted, 5: Exceeded)."},{"name":"created_on","type":"timestamp","default":"CURRENT_TIMESTAMP","description":"Timestamp when the record was created."},{"name":"updated_on","type":"timestamp","description":"Timestamp of the most recent update to the record."},{"name":"description","type":"varchar(100)","description":"Additional information or notes about the leave entitlement."}]},{"name":"attendance","description":"Stores records of employee attendance, including check-in and check-out times and status.","columns":[{"name":"id","type":"serial","primary_key":true,"description":"Unique identifier for each attendance record."},{"name":"employee","type":"integer","foreign_key":{"references":"hr.employees","on_update":"cascade","on_delete":"cascade"},"description":"Reference to the employee associated with the attendance record."},{"name":"date","type":"date","description":"Date of the attendance record."},{"name":"check_in","type":"time","description":"Time when the employee checked in."},{"name":"check_out","type":"time","description":"Time when the employee checked out."},{"name":"status","type":"integer","default":0,"description":"Attendance status (0: Absent, 1: Present, 2: Late, 3: Leave, 4: Remote, 5: Business Trip)."},{"name":"work_hours","type":"interval","generated":"always","description":"Calculated field representing the total hours worked."},{"name":"remarks","type":"text","description":"Additional notes or comments about the attendance record."},{"name":"created_on","type":"timestamp","default":"CURRENT_TIMESTAMP","description":"Timestamp when the record was created."},{"name":"updated_on","type":"timestamp","description":"Timestamp when the record was last updated."}]},{"name":"kpi","description":"Stores Key Performance Indicators (KPI) for employees, tracking their performance over a specified period.","columns":[{"name":"id","type":"serial","primary_key":true,"description":"Unique identifier for each KPI record."},{"name":"employee","type":"integer","foreign_key":{"references":"hr.employees"},"description":"Reference to the employee being evaluated."},{"name":"category","type":"integer","foreign_key":{"references":"ref.kpi_categories"},"description":"Reference to the KPI category, defining the type of performance being measured."},{"name":"target_value","type":"numeric(10,2)","description":"The expected or target value to be achieved for this KPI."},{"name":"achieved_value","type":"numeric(10,2)","default":0,"description":"The actual value achieved by the employee for this KPI."},{"name":"unit","type":"varchar(50)","description":"The unit of measurement for the KPI (e.g., %, hours, tasks)."},{"name":"period_fr","type":"date","description":"The starting date of the performance evaluation period."},{"name":"period_to","type":"date","description":"The ending date of the performance evaluation period."},{"name":"status","type":"integer","default":4,"description":"The status of the KPI (1: Achieved, 2: Not Met, 3: In Progress, 4: Pending)."},{"name":"performance","type":"numeric(5,2)","generated":"always","description":"Calculated field representing the performance percentage. If achieved value meets or exceeds the target, it is set to 100%, otherwise calculated as (achieved_value / target_value) * 100."},{"name":"remarks","type":"text","description":"Additional comments or notes regarding the employee\'s KPI performance."},{"name":"created_at","type":"timestamp","default":"CURRENT_TIMESTAMP","description":"Timestamp indicating when the KPI record was created."},{"name":"updated_at","type":"timestamp","description":"Timestamp indicating the most recent update to the KPI record."}]}],"views":[{"name":"v_employee_profiles","description":"Provides a comprehensive view of employee profiles, including personal information, job details, and hierarchical relationships.","columns":[{"name":"id","type":"integer","description":"Unique identifier for each employee."},{"name":"first_name","type":"varchar(50)","description":"Employee\'s first name."},{"name":"last_name","type":"varchar(50)","description":"Employee\'s last name."},{"name":"id_number","type":"varchar(18)","description":"National identification number for the employee."},{"name":"sex","type":"text","description":"Gender of the employee (\'Male\' or \'Female\')."},{"name":"citizen_number","type":"varchar(16)","description":"Citizen identification number of the employee."},{"name":"tax_number","type":"varchar(20)","description":"Employee\'s tax identification number."},{"name":"birth_place","type":"varchar(50)","description":"Place where the employee was born."},{"name":"birth_date","type":"date","description":"Employee\'s date of birth."},{"name":"address","type":"varchar(200)","description":"Residential address of the employee."},{"name":"email","type":"varchar(50)","description":"Employee\'s email address."},{"name":"phone_number","type":"varchar(20)","description":"Employee\'s contact phone number."},{"name":"hire_date","type":"date","description":"Date when the employee was hired."},{"name":"job_id","type":"integer","description":"Reference to the employee\'s job position."},{"name":"job_title","type":"varchar(100)","description":"Title of the job position held by the employee."},{"name":"rank_id","type":"integer","description":"Reference to the employee\'s rank."},{"name":"rank","type":"varchar(50)","description":"Name of the employee\'s rank."},{"name":"echelon_id","type":"integer","description":"Reference to the employee\'s echelon level."},{"name":"echelon","type":"varchar(50)","description":"Name of the employee\'s echelon or \'-\' if not applicable."},{"name":"manager","type":"text","description":"Full name of the employee\'s manager or \'-\' if no manager is assigned."},{"name":"unit_id","type":"integer","description":"Reference to the organizational unit the employee belongs to."},{"name":"unit","type":"varchar(100)","description":"Name of the organizational unit the employee belongs to."}]},{"name":"v_employee_leaves_remaining","description":"Provides an overview of employees\' leave entitlements, including total, used, and remaining leave days.","columns":[{"name":"id","type":"integer","description":"Unique identifier for each employee."},{"name":"first_name","type":"varchar(50)","description":"Employee\'s first name."},{"name":"last_name","type":"varchar(50)","description":"Employee\'s last name."},{"name":"id_number","type":"varchar(18)","description":"Employee\'s national identification number."},{"name":"year","type":"varchar(4)","description":"The year the leave entitlement applies to."},{"name":"total_entitlement","type":"integer","description":"Total leave days the employee is entitled to for the specified year."},{"name":"total_used","type":"integer","description":"Total leave days the employee has used."},{"name":"total_remaining","type":"integer","description":"Total leave days the employee has remaining."}]},{"name":"v_employee_leave_details","description":"Provides detailed information on employees\' leave records, including validity period and usage.","columns":[{"name":"id","type":"integer","description":"Unique identifier for each employee."},{"name":"first_name","type":"varchar(50)","description":"Employee\'s first name."},{"name":"last_name","type":"varchar(50)","description":"Employee\'s last name."},{"name":"id_number","type":"varchar(18)","description":"Employee\'s national identification number."},{"name":"year","type":"varchar(4)","description":"The year the leave record applies to."},{"name":"start_date","type":"date","description":"Start date of the leave entitlement period."},{"name":"end_date","type":"date","description":"End date of the leave entitlement period."},{"name":"total_days","type":"integer","description":"Total leave days allocated for the period."},{"name":"used","type":"integer","description":"Leave days used within the period."},{"name":"remaining","type":"integer","description":"Leave days remaining for the period."},{"name":"leave_type","type":"varchar(50)","description":"Type of leave (e.g., annual, sick, etc.)."},{"name":"description","type":"varchar(100)","description":"Additional information or description of the leave."}]},{"name":"v_today_attendance","description":"Provides a summary of today\'s attendance, including counts and percentages by attendance status.","columns":[{"name":"status","type":"integer","description":"Attendance status (e.g., 0: Absent, 1: Present, etc.)."},{"name":"label","type":"text","description":"Text label corresponding to the attendance status (e.g., \'Present\', \'Absent\')."},{"name":"percentage","type":"numeric","description":"Percentage of employees with this attendance status."},{"name":"count","type":"integer","description":"Count of employees with this attendance status."},{"name":"total_employee","type":"integer","description":"Total number of employees in the system."}]}]}]}';
        $request->validate([
            'leader' => 'required|boolean',
            'messages' => 'required|array',
            'messages.*.role' => 'required|string',
            'messages.*.text' => 'required|string',
        ]);

        $messages = $request->input('messages');
        // Map messages and convert role to Gemini format
        $parts = array_map(function ($message) {
            return [
                'role' => strtolower($message['role']) === 'baskara' ? 'model' : 'user',
                'parts' => [['text' => $message['text']]]
            ];
        }, $messages);
        $parts_ori = $parts;

        $last_question = collect($parts)->last()['parts'][0]['text'];
        $parts[array_key_last($parts)]['parts'][0]['text'] .= " is the question above
        specifically related to employee data? Only answer in JSON string format as follows :
        {
            'answer' : 'yes or no',
            'query' : 'Only if the answer is yes,
            generate PostgreSQL 16 query ONLY based on this database structure $structure_json,
            use appropriate and representative field names and aliases,
            answer with ONLY THE QUERY. Otherwise leave empty.
        }";
        try {
            $is_summary = $this->callGemini($parts);
        } catch (GeminiException $e) {
            return response()->json($e->getError(), 500);
        }
        $is_summary = $is_summary['result']['baskara'];
        $is_summary = substr($is_summary, 8, strlen($is_summary) - 12);
        $x = json_decode($is_summary);
        if ($x->answer === 'yes') {
            $res = DB::select($x->query);
            $parts[] = ['role' => 'model',
                'parts' => [['text' => $is_summary]]];
            $parts[] = ['role' => 'user',
                'parts' => [['text' => "convert this data " . json_encode($res) . " into human-readable answer based on this context (also match the question language) : " . $last_question]]];
        }
        else {
            $parts = $parts_ori;
        }
        try {
            return response()->json($this->callGemini($parts));
        } catch (GeminiException $e) {
            // Catch any exceptions and return a friendly error message
            return response()->json($e->getError(), 500);
        }
    }

    public function askData(Request $request) {
        $apiKey = env('GEMINI_API_KEY');

        $request->validate([
            'leader' => 'required|boolean',
            'messages' => 'required|array',
            'messages.*.role' => 'required|string',
            'messages.*.text' => 'required|string',
        ]);

        $messages = $request->input('messages');
        //        echo json_encode($messages);exit;
        $url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={$apiKey}";

        // Map messages and convert role to Gemini format
        $parts = array_map(function ($message) {
            return [
                'role' => strtolower($message['role']) === 'baskara' ? 'model' : 'user',
                'parts' => [['text' => $message['text']]]
            ];
        }, $messages);

        try {
            $response = Http::withHeaders([
                'Content-Type' => 'application/json',
            ])->post($url, [
                'contents' => $parts
            ]);

            if (!$response->successful()) {
                return response()->json([
                    'code' => '99',
                    'error' => 'API request failed!',
                    'status_code' => $response->status(),
                    'message' => $response->body(),
                ], $response->status());
            }

            $data = $response->json();

            // Validate JSON structure and extract "text"
            $text = data_get($data, 'candidates.0.content.parts.0.text');

            if (!$text) {
                throw new \Exception('Text not found in API response.');
            }

            return response()->json([
                'code' => '00',
                'status_code' => $response->status(),
                'message' => $response->body(),
                'result' => [
                    'baskara' => $text
                ]
            ]);
        } catch (\Exception $e) {
            // Catch any exceptions and return a friendly error message
            return response()->json([
                'code' => '99',
                'error' => 'An error occurred while processing the API response.',
                'status_code' => $response->status(),
                'message' => $e->getMessage(),
            ], 500);
        }
    }

    private function needsQuery(array $parts) {
        $structure_json = '{"tables":[{"name":"ref.regions","owner":"bpkp_aiva","description":"Stores information about geographic regions.","columns":[{"name":"region_id","type":"serial","primary_key":true,"description":"Unique identifier for the region."},{"name":"region_name","type":"varchar(25)","description":"Name of the region."}]},{"name":"ref.countries","owner":"bpkp_aiva","description":"Stores information about countries and their associated regions.","columns":[{"name":"id","type":"integer","primary_key":true,"description":"Unique identifier for the country."},{"name":"name","type":"varchar(40)","description":"Name of the country."},{"name":"region","type":"integer","foreign_key":{"references":"ref.regions","on_update":"cascade","on_delete":"cascade"},"description":"Reference to the region the country belongs to."},{"name":"created_on","type":"timestamp","default":"CURRENT_TIMESTAMP","description":"Timestamp when the country record was created."},{"name":"updated_on","type":"timestamp","description":"Timestamp when the country record was last updated."},{"name":"code","type":"varchar(2)","unique":true,"description":"ISO 3166-1 alpha-2 country code."}]},{"name":"ref.provinces","owner":"postgres","description":"Stores information about provinces within countries.","columns":[{"name":"id","type":"serial","primary_key":true,"description":"Unique identifier for the province."},{"name":"country","type":"integer","foreign_key":{"references":"ref.countries"},"description":"Reference to the country the province belongs to."},{"name":"code","type":"varchar(2)","unique":true,"description":"Province code."},{"name":"name","type":"varchar(50)","description":"Name of the province."}]},{"name":"ref.cities","owner":"postgres","description":"Stores information about cities within provinces.","columns":[{"name":"id","type":"integer","primary_key":true,"description":"Unique identifier for the city."},{"name":"province","type":"integer","foreign_key":{"references":"ref.provinces"},"description":"Reference to the province the city belongs to."},{"name":"code","type":"varchar(4)","unique":true,"description":"City code."},{"name":"type","type":"integer","description":"Type/category of the city (e.g., metropolitan, urban, rural)."},{"name":"name","type":"varchar(50)","description":"Name of the city."}]},{"name":"hr.jobs","owner":"postgres","description":"Stores information about job positions and their associated echelons and ranks.","columns":[{"name":"id","type":"integer","primary_key":true,"default":"nextval(\'hr.jobs_job_seq\'::regclass)","description":"Unique identifier for the job."},{"name":"title","type":"varchar(100)","description":"Title or name of the job."},{"name":"echelon","type":"integer","foreign_key":{"references":"ref.echelons","on_update":"cascade","on_delete":"cascade"},"description":"Reference to the echelon level associated with the job."},{"name":"min_salary","type":"integer","description":"Minimum salary for the job."},{"name":"max_salary","type":"integer","description":"Maximum salary for the job."},{"name":"created_on","type":"timestamp","default":"CURRENT_TIMESTAMP","description":"Timestamp when the job record was created."},{"name":"updated_on","type":"timestamp","description":"Timestamp when the job record was last updated."},{"name":"rank","type":"integer","foreign_key":{"references":"ref.ranks","on_update":"cascade","on_delete":"cascade"},"description":"Reference to the rank associated with the job."}]},{"name":"ref.leave_types","owner":"postgres","description":"Stores different categories of leave and their associated parameters.","columns":[{"name":"id","type":"serial","primary_key":true,"description":"Unique identifier for the leave type."},{"name":"name","type":"varchar(50)","description":"Name of the leave type (e.g., annual leave, sick leave)."},{"name":"max_days","type":"integer","description":"Maximum number of days allowed for this leave type."},{"name":"cycle","type":"varchar(20)","description":"Cycle period for the leave type (e.g., annual, monthly)."}]},{"name":"ref.offices","owner":"postgres","description":"Stores information about office locations and their associated geographical data.","columns":[{"name":"id","type":"serial","primary_key":true,"description":"Unique identifier for the office."},{"name":"name","type":"varchar(100)","description":"Name of the office."},{"name":"address","type":"varchar(200)","description":"Full address of the office."},{"name":"postal_code","type":"varchar(12)","description":"Postal code for the office location."},{"name":"city","type":"integer","foreign_key":{"references":"ref.cities"},"description":"Reference to the city where the office is located."},{"name":"province","type":"integer","foreign_key":{"references":"ref.provinces"},"description":"Reference to the province where the office is located."},{"name":"country","type":"integer","foreign_key":{"references":"ref.countries"},"description":"Reference to the country where the office is located."}]},{"name":"hr.units","owner":"postgres","description":"Stores information about organizational units and their hierarchy.","columns":[{"name":"id","type":"serial","primary_key":true,"description":"Unique identifier for the unit."},{"name":"name","type":"varchar(100)","description":"Name of the organizational unit."},{"name":"echelon","type":"integer","description":"Echelon level of the unit."},{"name":"office","type":"integer","foreign_key":{"references":"ref.offices"},"description":"Reference to the office where the unit is based."},{"name":"managing_unit","type":"integer","foreign_key":{"references":"hr.units"},"description":"Reference to the parent unit managing this unit."},{"name":"head","type":"integer","description":"Identifier for the head of the unit."},{"name":"created_on","type":"timestamp","default":"CURRENT_TIMESTAMP","description":"Timestamp when the unit record was created."},{"name":"updated_on","type":"integer","description":"Timestamp when the unit record was last updated."}]},{"name":"hr.employees","owner":"postgres","description":"Stores detailed information about employees and their employment details.","columns":[{"name":"id","type":"serial","primary_key":true,"description":"Unique identifier for the employee."},{"name":"id_number","type":"varchar(18)","description":"National identification number of the employee."},{"name":"first_name","type":"varchar(50)","description":"First name of the employee."},{"name":"last_name","type":"varchar(50)","description":"Last name of the employee."},{"name":"citizen_number","type":"varchar(16)","description":"Citizen number or social security number."},{"name":"birth_place","type":"varchar(50)","description":"Place of birth of the employee."},{"name":"birth_date","type":"date","description":"Birth date of the employee."},{"name":"address","type":"varchar(200)","description":"Residential address of the employee."},{"name":"email","type":"varchar(50)","description":"Email address of the employee."},{"name":"phone_number","type":"varchar(20)","description":"Contact number of the employee."},{"name":"tax_number","type":"varchar(20)","description":"Tax identification number of the employee."},{"name":"hire_date","type":"date","description":"Date when the employee was hired."},{"name":"resignation_date","type":"date","description":"Date when the employee resigned (if applicable)."},{"name":"rank","type":"integer","foreign_key":{"references":"ref.ranks"},"description":"Reference to the employee\'s rank."},{"name":"job","type":"integer","foreign_key":{"references":"hr.jobs"},"description":"Reference to the employee\'s job position."},{"name":"unit","type":"integer","foreign_key":{"references":"hr.units"},"description":"Reference to the unit the employee belongs to."},{"name":"manager","type":"integer","foreign_key":{"references":"hr.employees"},"description":"Reference to the employee\'s manager."},{"name":"salary","type":"integer","default":0,"description":"Salary of the employee."},{"name":"created_on","type":"timestamp","default":"CURRENT_TIMESTAMP","description":"Timestamp when the employee record was created."},{"name":"updated_on","type":"timestamp","description":"Timestamp when the employee record was last updated."},{"name":"sex","type":"integer","description":"Gender of the employee (1: Male, 2: Female)."}]},{"name":"hr.leave_entitlements","owner":"postgres","description":"Stores information about employee leave entitlements, including usage and remaining leave.","columns":[{"name":"id","type":"serial","primary_key":true,"description":"Unique identifier for the leave entitlement record."},{"name":"year","type":"varchar(4)","description":"The calendar year for which the leave entitlement is valid."},{"name":"employee","type":"integer","foreign_key":{"references":"hr.employees"},"description":"Reference to the employee associated with the leave entitlement."},{"name":"leave_type","type":"integer","foreign_key":{"references":"ref.leave_types"},"description":"Reference to the type of leave."},{"name":"entitlement","type":"integer","description":"Total number of leave days entitled to the employee."},{"name":"used","type":"integer","description":"Number of leave days used by the employee."},{"name":"remaining","type":"integer","generated":"always","description":"Calculated field representing remaining leave days."},{"name":"valid_fr","type":"date","description":"Start date of the leave entitlement validity period."},{"name":"valid_thru","type":"date","description":"End date of the leave entitlement validity period."},{"name":"status","type":"integer","description":"Status of the leave entitlement (1: Active, 2: Pending, 3: Expired, 4: Depleted, 5: Exceeded)."},{"name":"created_on","type":"timestamp","default":"CURRENT_TIMESTAMP","description":"Timestamp when the record was created."},{"name":"updated_on","type":"timestamp","description":"Timestamp when the record was last updated."},{"name":"description","type":"varchar(100)","description":"Additional information or notes about the leave entitlement."}]},{"name":"hr.attendance","owner":"postgres","description":"Stores records of employee attendance, including check-in and check-out times and status.","columns":[{"name":"id","type":"serial","primary_key":true,"description":"Unique identifier for the attendance record."},{"name":"employee","type":"integer","foreign_key":{"references":"hr.employees","on_update":"cascade","on_delete":"cascade"},"description":"Reference to the employee associated with the attendance record."},{"name":"date","type":"date","description":"Date of the attendance record."},{"name":"check_in","type":"time","description":"Time when the employee checked in."},{"name":"check_out","type":"time","description":"Time when the employee checked out."},{"name":"status","type":"integer","default":0,"description":"Attendance status (0: Absent, 1: Present, 2: Late, 3: Leave, 4: Remote, 5: Business Trip)."},{"name":"work_hours","type":"interval","generated":"always","description":"Calculated field representing the total hours worked."},{"name":"remarks","type":"text","description":"Additional notes or comments about the attendance record."},{"name":"created_on","type":"timestamp","default":"CURRENT_TIMESTAMP","description":"Timestamp when the record was created."},{"name":"updated_on","type":"timestamp","description":"Timestamp when the record was last updated."},{"name":"leave_type","type":"integer","foreign_key":{"references":"ref.leave_types","on_update":"cascade","on_delete":"cascade"},"description":"Reference to the leave type if applicable."}]}]}';
        $parts[array_key_last($parts)]['parts'][0]['text'] .= " is the question above
        specifically related to employee data? Only answer in JSON string format as follows :
        {
            'answer' : 'yes or no',
            'query' : 'Only if the answer is yes, generate PostgreSQL 16 query only based on this database structure $structure_json, ONLY THE QUERY. Otherwise leave empty.
        }";
        try {
            return $this->callGemini($parts);
            //            $response = Http::withHeaders([
            //                'Content-Type' => 'application/json',
            //            ])->post($url, [
            //                'contents' => $parts
            //            ]);
            //
            //            if (!$response->successful()) {
            //                return response()->json([
            //                    'code' => '99',
            //                    'error' => 'API request failed!',
            //                    'status_code' => $response->status(),
            //                    'message' => $response->body(),
            //                ], $response->status());
            //            }
            //
            //            $data = $response->json();
            //
            //            // Validate JSON structure and extract "text"
            //            $text = data_get($data, 'candidates.0.content.parts.0.text');
            //
            //            if (!$text) {
            //                throw new \Exception('Text not found in API response.');
            //            }
            //
            //            return response()->json([
            //                'code' => '00',
            //                'status_code' => $response->status(),
            //                'message' => $response->body(),
            //                'result' => [
            //                    'baskara' => $text
            //                ]
            //            ]);
        } catch (GeminiException $e) {
            // Catch any exceptions and return a friendly error message
            return $e->getError();
        }
    }

    private function callGemini(array $parts): array {
        $apiKey = env('GEMINI_API_KEY');
        $url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={$apiKey}";

        $response = Http::withHeaders([
            'Content-Type' => 'application/json',
        ])->post($url, [
            'contents' => $parts,
            'generationConfig' => [
                "temperature" => 0,
                "topK" => 40,
                "topP" => 0.95,
                "maxOutputTokens" => 8192,
                "responseMimeType" => "text/plain"
            ]
        ]);

        if (!$response->successful()) {
            throw new GeminiException([
                'code' => '99',
                'error' => 'API request failed!',
                'status_code' => $response->status(),
                //                'message' => $response->body(),
            ], $response->status());
        }

        $data = $response->json();

        // Validate JSON structure and extract "text"
        $text = data_get($data, 'candidates.0.content.parts.0.text');

        if (!$text) {
            throw new GeminiException([
                'code' => '99',
                'error' => 'Text not found in API response.',
                'status_code' => $response->status(),
                'message' => 'Invalid response structure.',
            ], 500);
        }

        return [
            'code' => '00',
            'status_code' => $response->status(),
            //            'message' => $response->body(),
            'result' => [
                'baskara' => $text
            ]
        ];
    }
}

